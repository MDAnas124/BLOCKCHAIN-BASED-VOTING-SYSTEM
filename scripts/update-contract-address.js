const fs = require('fs').promises;
const path = require('path');
const Web3 = require('web3');
const TruffleConfig = require('../truffle-config');

async function main() {
    try {
        // Connect to the network
        const networkConfig = TruffleConfig.networks.development;
        const web3 = new Web3(`http://${networkConfig.host}:${networkConfig.port}`);

        // Test connection
        await web3.eth.net.isListening();
        console.log('Connected to blockchain network');

        // Get the contract deployment information
        const deploymentPath = path.join(__dirname, '..', 'build', 'contracts', 'VotingSystem.json');
        let deploymentData;
        
        try {
            const rawData = await fs.readFile(deploymentPath, 'utf8');
            deploymentData = JSON.parse(rawData);
        } catch (error) {
            throw new Error(`Failed to read deployment data: ${error.message}. Make sure to run 'truffle compile' first.`);
        }

        // Get the network ID
        const networkId = await web3.eth.net.getId();
        console.log('Network ID:', networkId);

        const deployedNetwork = deploymentData.networks[networkId];
        if (!deployedNetwork) {
            throw new Error(`Contract not deployed on network ${networkId}. Make sure to run 'truffle migrate --reset' first.`);
        }

        const contractAddress = deployedNetwork.address;
        if (!contractAddress) {
            throw new Error('Contract address not found in deployment data');
        }

        // Verify contract exists at address
        const code = await web3.eth.getCode(contractAddress);
        if (code === '0x') {
            throw new Error(`No contract found at address ${contractAddress}`);
        }

        console.log('VotingSystem contract verified at:', contractAddress);

        // Create the contract-address.js content
        const contractAddressFile = `// Auto-generated by deploy script
// Contract deployed at: ${new Date().toISOString()}
window.CONTRACT_ADDRESS = '${contractAddress}';
window.CONTRACT_ABI = ${JSON.stringify(deploymentData.abi, null, 2)};`;

        // Write to src/contract-address.js
        const filePath = path.join(__dirname, '..', 'src', 'contract-address.js');
        await fs.writeFile(filePath, contractAddressFile);
        console.log('✓ Contract address and ABI written to:', filePath);
        process.exit(0);

    } catch (error) {
        console.error('\nError updating contract address:');
        console.error('❌', error.message);
        if (error.stack) {
            console.error('\nStack trace:');
            console.error(error.stack);
        }
        process.exit(1);
    }
}

// Run the script
main();
